{"version":3,"sources":["components/my-timer/my-timer-view.js","components/my-timer/index.js","App.js","serviceWorker.js","index.js"],"names":["MyTimerView","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","teamAmount","teamAmountDefault","showTeamAmountForm","onSubmitTeamAmount","bind","assertThisInitialized","toggleTeamAmountForm","amount","setState","event","preventDefault","milli","_this2","react_default","a","createElement","className","style","maxWidth","onSubmit","type","value","onChange","e","onChangeTeamAmount","parseInt","target","teamTime","length","Fragment","concat","milliToSec","timeNow","toFixed","disabled","onClick","onClickTimerButton","isRunning","onClickSelectPrevTeam","onClickSelectNextTeam","scope","map","time","index","key","currentTeam","React","Component","MyTimer","timeLimit","undefined","handleTimerButton","handleSetTeamAmount","selectPrevTeam","selectNextTeam","stopTimer","timerID","setInterval","updateTime","clearInterval","newTeamTime","slice","current","interval","startTimer","Array","fill","my_timer_view","App","my_timer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.78792bd2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass MyTimerView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            teamAmount: props.teamAmountDefault,\r\n            showTeamAmountForm: true,\r\n        }\r\n        this.onSubmitTeamAmount = this.onSubmitTeamAmount.bind(this);\r\n        this.toggleTeamAmountForm = this.toggleTeamAmountForm.bind(this);\r\n    }\r\n\r\n    onChangeTeamAmount(amount) {\r\n        this.setState({teamAmount: amount});\r\n    }\r\n\r\n    onSubmitTeamAmount(event) {\r\n        event.preventDefault();\r\n        this.setState({ showTeamAmountForm: false});\r\n        this.props.onSubmitTeamAmount(this.state.teamAmount);\r\n    }\r\n\r\n    toggleTeamAmountForm() {\r\n        this.setState((state, props) => {\r\n            return {\r\n                showTeamAmountForm: !state.showTeamAmountForm,\r\n            }\r\n        });\r\n    }\r\n\r\n    milliToSec(milli) {\r\n        return milli * 1.0 / 1000;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\" style={{maxWidth: '360px'}}>\r\n                <h1 className=\"font-weight-bold mt-5\">My Timer</h1>\r\n                { this.state.showTeamAmountForm &&\r\n                    <form onSubmit={this.onSubmitTeamAmount}>\r\n                        <div className=\"form-group\">\r\n                            <label>Number of teams</label>\r\n                            <input type=\"number\" className=\"form-control\" value={this.state.teamAmount} onChange={e => this.onChangeTeamAmount(parseInt(e.target.value))}></input>\r\n                        </div>\r\n                        <button type=\"submit\" className=\"btn btn-block btn-primary\" value=\"Submit\">Submit</button>\r\n                    </form>\r\n                }\r\n                <hr className=\"\" />\r\n                { this.props.teamTime && this.props.teamTime.length > 0 &&\r\n                    <>\r\n                    <div className=\"my-3\">\r\n                        <h1 className=\"text-center display-3\">{`${this.milliToSec(this.props.timeNow).toFixed(1)}`}</h1>\r\n                        <form>\r\n                            <fieldset disabled={!this.props.teamAmount}>\r\n                                <button type=\"button\" \r\n                                    onClick={this.props.onClickTimerButton}\r\n                                    className={`btn btn-block mt-4 ${!this.props.isRunning ? \"btn-success\" : \"btn-danger\"}`}\r\n                                >\r\n                                    {!this.props.isRunning ? \"Start\" : \"Stop\"}\r\n                                </button>\r\n                                <div className=\"form-row mt-2\">\r\n                                    <div className=\"col\">\r\n                                        <button type=\"button\"\r\n                                            className=\"btn btn-outline-secondary btn-block btn-sm\"\r\n                                            onClick={this.props.onClickSelectPrevTeam}\r\n                                        >\r\n                                            Prev\r\n                                        </button>\r\n                                    </div>\r\n                                    <div className=\"col\">\r\n                                        <button type=\"button\"\r\n                                            className=\"btn btn-outline-secondary btn-block btn-sm\"\r\n                                            onClick={this.props.onClickSelectNextTeam}\r\n                                        >\r\n                                            Next\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </fieldset>\r\n                        </form>\r\n                    </div>\r\n                    <hr />\r\n                    <table className=\"table table-bordered\">\r\n                        <thead className=\"thead-dark\">\r\n                            <tr>\r\n                                <th scope=\"col\">#</th>\r\n                                <th scope=\"col\">Total Time (seconds)</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {this.props.teamTime.map( (time,index) =>\r\n                            <tr key={index} className={index === this.props.currentTeam ? \"table-active\" : \"\"}>\r\n                                <th scope=\"row\">{index + 1}</th>\r\n                                <td>{this.milliToSec(time).toFixed(1)}</td>\r\n                            </tr>\r\n                        )}\r\n                        </tbody>\r\n                    </table>\r\n                    <button type=\"button\" \r\n                        onClick={this.toggleTeamAmountForm}\r\n                        className={`btn btn-block my-3 btn-secondary btn-sm`}\r\n                    >\r\n                        Toggle Form\r\n                    </button>\r\n                </>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MyTimerView;","import React from 'react';\r\nimport MyTimerView from './my-timer-view';\r\n\r\nclass MyTimer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.teamAmountDefault = 2;\r\n        this.timeLimit = 15000;\r\n        this.state = {\r\n            teamAmount: undefined,\r\n            teamTime: [],\r\n            isRunning: false,\r\n            timeNow: 0,\r\n            currentTeam: undefined,\r\n        }\r\n        \r\n        this.handleTimerButton = this.handleTimerButton.bind(this);\r\n        this.handleSetTeamAmount = this.handleSetTeamAmount.bind(this);\r\n        this.selectPrevTeam = this.selectPrevTeam.bind(this);\r\n        this.selectNextTeam = this.selectNextTeam.bind(this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.stopTimer();\r\n    }\r\n \r\n    startTimer() {\r\n        this.setState({timeNow: 0, isRunning: true});\r\n        this.timerID = setInterval(\r\n            () => this.updateTime(100),\r\n            100\r\n        );\r\n        \r\n    }\r\n\r\n    stopTimer() {\r\n        this.setState({isRunning: false});\r\n        if (this.timerID) {\r\n            clearInterval(this.timerID);\r\n        }\r\n        let newTeamTime = this.state.teamTime.slice();\r\n        newTeamTime[this.state.currentTeam] = newTeamTime[this.state.currentTeam] + this.state.timeNow;\r\n        this.setState((state, props) => {\r\n            return {\r\n                teamTime: newTeamTime,\r\n                currentTeam: (state.currentTeam + 1) % state.teamAmount,\r\n            }\r\n        });\r\n    }\r\n\r\n    selectNextTeam() {\r\n        this.setState((state, props) => {\r\n            return {\r\n                currentTeam: (state.currentTeam + 1) % state.teamAmount,\r\n            }\r\n        });\r\n    }\r\n\r\n    selectPrevTeam() {\r\n        this.setState((state, props) => {\r\n            let current = state.currentTeam - 1;\r\n            return {\r\n                currentTeam: current >= 0 ? current : state.teamAmount - 1,\r\n            }\r\n        });\r\n    }\r\n\r\n    updateTime(interval) {\r\n        this.setState((state, props) => {\r\n            return { timeNow: state.timeNow + interval }\r\n        });\r\n        if (this.state.timeNow >= this.timeLimit) {\r\n            this.stopTimer();\r\n        }\r\n    }\r\n\r\n    handleTimerButton() {\r\n        if (!this.state.isRunning) {\r\n            this.startTimer();\r\n        } else {\r\n            this.stopTimer();\r\n        }\r\n    }\r\n\r\n    handleSetTeamAmount(amount) {\r\n        this.stopTimer();\r\n        this.setState({\r\n            teamAmount: amount,\r\n            currentTeam: 0,\r\n            timeNow: 0,\r\n            teamTime: Array(amount).fill(0),\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <MyTimerView\r\n                isRunning={this.state.isRunning}\r\n                teamTime={this.state.teamTime}\r\n                timeNow={this.state.timeNow}\r\n                currentTeam={this.state.currentTeam}\r\n                teamAmountDefault={this.teamAmountDefault}\r\n                teamAmount={this.state.teamAmount}\r\n                onClickTimerButton={this.handleTimerButton}\r\n                onSubmitTeamAmount={this.handleSetTeamAmount}\r\n                onClickSelectNextTeam={this.selectNextTeam}\r\n                onClickSelectPrevTeam={this.selectPrevTeam}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default MyTimer;\r\n","import React, { Component } from 'react';\r\nimport MyTimer from './components/my-timer'\r\n\r\nimport 'jquery/dist/jquery.min.js';\r\nimport 'popper.js/dist/popper.min.js';\r\nimport 'bootstrap/dist/js/bootstrap.min.js';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <MyTimer />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}